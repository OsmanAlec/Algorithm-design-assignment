TASK 1

FUNCTION mergesort(A, n) 
	IF n < 2
		return;
	END IF 
	middle = n / 2 
	FOR i = 0 to mid
		left_struct[i] = A[i]
	END FOR
	FOR i = mid to n
		right_struct[i-mid] = A[i]
	END FOR
	mergesort(left_struct, mid)
	mergesort(right, n - mid)
	merge (A, left, right, mid, n-mid)
	
END FUNCTION

FUNCTION merge (A, left, right, nL, nr)
	i = 0
	j = 0
	k = 0
	WHILE i < nL and j < nR
		IF left[i].product_ID < right[j].product_ID
            		A[k++] = left[i++]

        	ELSE IF left[i].product_ID == right[j].product_ID and left[i].iss.code < right[j].iss.code
            		A[k++] = left[i++]

        	ELSE IF left[i].product_ID == right[j].product_ID and left[i].iss.code == right[j].iss.code and left[i].dt.time <= right[j].dt.time
            		A[k++] = left[i++]
        
        	ELSE 
            		A[k++] = right[j++]

		END IF
        
    WHILE i < nL
        A[k++] = left[i++]
    
    WHILE j < nR
        A[k++] = right[j++]

END FUNCTION


TASK 2

FUNCTION findIssues(data, issue_log, count)
    k = 0

    FOR i = 0, i < DATA_SIZE, i+=k
        k = 0
        issue_log[count].line_code = data[i].line_code
        issue_log[count].product_ID = data[i].product_ID
        
        FOR j = i to DATA_SIZE
            IF issue_log[count].product_ID == data[j].product_ID
                issue_log[count].issuecode_list[k] = data[j].iss.code
                k++
            ELSE
                break
	    END IF
        
        issue_log[count].issuecode_list_len += k
        count++
	END FOR
    END FOR
END FUNCTION


TASK 3
FUNCTION binarySearch(data, search)
    low = 0
    high = DATA_SIZE - 1

    WHILE low <= high
        mid = low + (high - low) / 2

        IF data[mid].product_ID == search
            return mid
        ELSE IF data[mid].product_ID < search
            low = mid + 1
        ELSE
            high = mid - 1
	END IF
    END WHILE

    return -1

END FUNCTION


TASK 4

FUNCTION summarizedata (issue_log[MAX_ISSUES], count, search)
    sum = 0
    FOR i from 0 to count - 1
        IF search == issue_log[i].product_id
            sum = sum + issue_log[i].issuecode_list_len
	END IF
    END FOR
    RETURN sum
END FUNCTION
